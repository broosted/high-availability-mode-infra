---
- hosts: aws_ec2
  become: yes
  tasks:
    - name: get update
      shell: apt-get update
    - name: install prereq
      apt:
        name: 
          - curl
          - apt-transport-https
          - ca-certificates

    - name: run this shell command for certs
      shell: |
              sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
              echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
              cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
              br_netfilter
              EOF

              cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1
              EOF
              sudo sysctl --system
              sudo apt-get update

    - name: install kube tools
      apt:
        name:
          - kubectl
          - kubelet
          - kubeadm
    
    - name: get update
      shell: sudo apt-get update
    - name: install docker
      apt:
        name: 
          - gnupg
          - lsb-release
    - name: install docker continued
      shell: |
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              chmod o+r /usr/share/keyrings/docker-archive-keyring.gpg
              sudo apt-get update
              sudo apt-get install -y docker-ce
    - name: install CRI-O runtime
      shell: |
              echo "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
              echo "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.23/xUbuntu_20.04/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.23.list
              mkdir -p /usr/share/keyrings
              curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key | gpg --batch --yes --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
              curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.23/xUbuntu_20.04/Release.key | gpg --batch --yes --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg

    - name: install CRI-O runtime continued
      shell: |
              # Create the .conf file to load the modules at bootup
              cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
              overlay
              br_netfilter
              EOF

              sudo modprobe overlay
              sudo modprobe br_netfilter

              # Set up required sysctl params, these persist across reboots.
              cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
              net.bridge.bridge-nf-call-iptables  = 1
              net.ipv4.ip_forward                 = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              EOF

              sudo sysctl --system
              apt-get update
              sudo apt-get install -y cri-o cri-o-runc
              sudo snap install yq
              sudo systemctl daemon-reload
              sudo systemctl enable crio --now